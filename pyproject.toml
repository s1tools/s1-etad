[build-system]
requires = ["setuptools>=61.0.0"]
build-backend = "setuptools.build_meta"


[project]
name = "s1etad"
authors = [
    {name = "Nuno Miranda"},
    {name = "Antonio Valentino"},
    {email = "s1etad@esa.int"},
]
description = "Reader for Sentinel-1 Extended Timing Annotation Dataset"
readme = {file = "README.rst", content-type = "text/x-rst"}
requires-python = ">=3.10"
keywords = [
    "sentinel", "copernicus", "esa", "remote-sensing", "satellite-imagery"
]
license = {text = "MIT License"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "numpy",
    "scipy",
    "lxml",
    "netCDF4",
    "pandas",
    "shapely>=1.8",
    "pymap3d",
]
dynamic = ["version"]


[project.optional-dependencies]
kmz = ["simplekml", "gdal", "matplotlib"]
ql = ["gdal", "matplotlib"]
cli = ["argcomplete"]
all = ["s1etad[kmz]", "s1etad[ql]", "s1etad[cli]"]


[project.scripts]
s1etad-cli = "s1etad.cli.main:main"


[project.urls]
Homepage = "https://github.com/s1tools/s1-etad"
Documentation = "https://s1etad.readthedocs.io"
Repository = "https://github.com/s1tools/s1-etad"
Changelog = "https://github.com/s1tools/s1-etad/blob/main/CHANGELOG.rst"
Issues = "https://github.com/s1tools/s1-etad/issues"


[tool.setuptools]
packages = ["s1etad", "s1etad.cli"]


[tool.setuptools.dynamic]
version = {attr = "s1etad.__version__"}


[tool.pytest.ini_options]
addopts = "--ignore=examples/"
markers = [
    "network: marks tests that require internet access (via pooch)",
]


[tool.black]
line-length = 79
preview = true
enable-unstable-feature = [
    "hug_parens_with_braces_and_square_brackets",
    "multiline_string_handling",
    "string_processing",
    "wrap_long_dict_values_in_parens",
]
# target-version = ['py311']
# extend-exclude = "packagename/parse/*"


[tool.isort]
profile = "black"
length_sort = true
multi_line_output = 3
no_inline_sort = true
include_trailing_comma = true
use_parentheses = true
line_length = 79
# force_grid_wrap = 0
# ensure_newline_before_comments = true
# known_first_party = ["my_module1", "my_module2"]
# skip_glob = ["packagename/parse/*"]


[tool.pydocstyle]
add-ignore = ["D105"]
# add-ignore = ["D105", "D107"]
match='(?!(test_|_s1utils|conf)).*\.py'


[tool.codespell]
skip = "*.ipynb,./docs/spelling_wordlist.txt"
count = true
quiet-level = 3
ignore-words-list = "SIE"


[tool.mypy]
plugins = ["numpy.typing.mypy_plugin"]


[tool.ruff]
line-length = 79
# indent-width = 4
# target-version = "py39"
extend-exclude = ["docs/conf.py"]


[tool.ruff.lint]
preview = true
select = [
    # ruff --version  # ruff 0.11.6
    "E",        #  E/W pycodestyle
    "W",        #  E/W pycodestyle
    "F",        #    F Pyflakes
    "D",        #    D pydocstyle
    "N",        #    N pep8-naming
    # "I",      #    I isort
    "C90",      #  C90 mccabe
    "UP",       #   UP pyupgrade
    # --- flake8 ---
    "YTT",      #  YTT flake8-2020
    # "ANN",    #  ANN flake8-annotations
    # "ASYNC",  #ASYNC flake8-async
    # "S",      #    S flake8-bandit
    "BLE",      #  BLE flake8-blind-except
    # "FBT",    #  FBT flake8-boolean-trap
    "B",        #    B flake8-bugbear
    "A",        #    A flake8-builtins
    # "COM",    #  COM flake8-commas
    "C4",       #   C4 flake8-comprehensions
    # "CPY",    #  CPY flake8-copyright
    "DTZ",      #  DTZ flake8-datetimez
    # "T10",    #  T10 flake8-debugger
    # "DJ",     #   DJ flake8-django
    # "EM",     #   EM flake8-errmsg
    "EXE",      #  EXE flake8-executable
    # "FIX",      #  FIX flake8-fixme
    # "FA",     #   FA flake8-future-annotations
    # "INT",    #  INT flake8-gettext
    "ISC",      #  ISC flake8-implicit-str-concat
    "ICN",      #  ICN flake8-import-conventions
    # "LOG",    #  LOG flake8-logging
    "G",        #    G flake8-logging-format
    "INP",      #  INP flake8-no-pep420
    "PIE",      #  PIE flake8-pie
    "T20",      #  T20 flake8-print
    # "PYI",    #  PYI flake8-pyi
    # "PT",     #   PT flake8-pytest-style
    "Q",        #    Q flake8-quotes
    "RSE",      #  RSE flake8-raise
    "RET",      #  RET flake8-return
    # "SLF",    #  SLF flake8-self
    # "SIM",    #  SIM flake8-simplify
    #"SLOT",    # SLOT flake8-slots
    # "TID",    #  TID flake8-tidy-imports
    # "TD",     #   TD flake8-todos
    # "TC",     #   TC flake8-type-checking
    # "ARG",    #  ARG flake8-unused-arguments
    # "PTH",    #  PTH flake8-use-pathlib
    # --- misc ---
    # "AIR",    #  AIR Airflow
    # "ERA",    #  ERA eradicate
    # "FAST",   # FAST FastAPI
    # "FLY",    #  FLY flynt
    "NPY",      #  NPY NumPy-specific rules
    # "PD",     #   PD pandas-vet
    # "PERF",   # PERF Perflint
    # "DOC",    #  DOC pydoclint
    # "PGH",    #  PGH pygrep-hooks
    # "PL",     #   PL Pylint
    # "FURB",   # FURB refurb
    # "RUF",    #  RUF Ruff-specific rules
    # "TRY",    #  TRY tryceratops
]
extend-ignore = [
    "D105",     # D105 Missing docstring in magic method
    "D107",     # D107 Missing docstring in `__init__`
    "D203",     # D203 1 blank line required before class docstring
    "D213",     # D213 Multi-line docstring summary should start at the second line
    # "ISC001",   # ISC001 Implicitly concatenated string literals on one line
    "PLR2004",  # PLR2004 Magic value used in comparison, consider replacing 2 with a constant variable
    # "PLR0913",  # PLR0913 Too many arguments in function definition
    # "PLW1514",  # PLW1514 `open` in text mode without explicit `encoding` argument
    "RET504",   # RET504 Unnecessary assignment before `return` statement
    "RET505",   # RET505 Unnecessary `elif` after `return` statement
]


[tool.ruff.format]
preview = true
docstring-code-format = true


[tool.ruff.lint.per-file-ignores]
"**/{tests}/*" = ["D"]
"**/{docs/notebooks}/*.ipynb" = ["D", "T201"]
"docs/conf.py" = ["D"]


[tool.ruff.lint.isort]
length-sort = true


[tool.ruff.lint.flake8-import-conventions.extend-aliases]
# "xml.etree.ElementTree" = "etree"
